{"version":3,"sources":["components/Autocomplete/AutocompleteInput.js","components/Autocomplete/Card.js","components/Autocomplete/SuggestionItem.js","components/Autocomplete/AutocompleteContainer.js","components/RecipeCards/Card.js","components/UserEntry/Entry.js","components/UserEntry/EntryContainer.js","App.js","serviceWorker.js","index.js"],"names":["AutocompleteInput","props","type","onChange","changeHandler","onClick","addCardHandler","text","Card","style","display","margin","padding","border","deleteCardHandler","name","SuggestionItem","ingredients","map","ingredient","index","includes","length","key","AutocompleteContainer","state","allIngredients","selectedIngredients","validateIngredient","ingredientName","console","log","match","forEach","newIngredient","undefined","id","validated","alert","push","setState","splice","event","target","value","toLowerCase","submitHandlerHelper","e","preventDefault","submitHandler","this","Component","cardStyle","recipes","viewMyRecipes","recipe","title","src","image","alt","usedIngredientCount","usedIngredients","missedIngredientCount","missedIngredients","saveHandler","instructions","deleteHandler","Entry","emailChangeHandler","placeholder","passwordChangeHandler","loginHandler","signupHandler","EntryContainer","email","password","savedRecipes","token","fetchSignup","fetchLogin","fetch","method","headers","body","JSON","stringify","username","then","res","json","window","sessionStorage","setItem","tokenHandler","catch","err","error","fetchUserRecipes","Authorization","callback","renderIfNoToken","App","activeUser","myRecipes","recipeId","newRecipe","fetchAddRecipe","myNewRecipes","fetchDeleteRecipe","newToken","userRecipes","Set","myRecipeViewHandler","fetchRecipeInformation","toggleEntryHandler","fetchRecipes","str","element","substring","temp","newMyRecipe","builder","extendedIngredients","className","renderAfterlogin","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d444dfde.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AutocompleteInput = props => {\n  return (\n    <div>\n      <input type=\"text\" onChange={props.changeHandler} />\n      <button onClick={() => props.addCardHandler(props.text)}>Add</button>\n    </div>\n  );\n};\n\nexport default AutocompleteInput;\n","import React from \"react\";\n\nconst Card = props => {\n  const cardStyle = {\n    display: \"inline-block\",\n    margin: \"0px 5px\",\n    padding: \"0px 5px\",\n    border: \"2px solid black\"\n  };\n  return (\n    <p style={cardStyle} onClick={props.deleteCardHandler}>\n      {props.name}\n    </p>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst SuggestionItem = props => {\n  return (\n    <div>\n      {props.ingredients.map((ingredient, index) => {\n        return ingredient.name.includes(props.text) &&\n          props.text.length >= 3 &&\n          props.text !== \" \" ? (\n          <div onClick={() => props.addCardHandler(ingredient)} key={index}>\n            {ingredient.name}\n          </div>\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default SuggestionItem;\n","import React, { Component } from \"react\";\nimport allIngredients from \"../../assets/ingredients.json\";\nimport AutocompleteInput from \"./AutocompleteInput\";\nimport Card from \"./Card\";\nimport SuggestionItem from \"./SuggestionItem\";\n\nclass AutocompleteContainer extends Component {\n  state = {\n    ingredients: allIngredients,\n    text: \"None\",\n    selectedIngredients: []\n  };\n\n  //This function is called if we are validating an ingredient which was not a Suggestion. If the ingredient exists in our list we return the object otherwise we return -1 as a flag.\n  validateIngredient = ingredientName => {\n    console.log(\"Called Validate Ingredient\");\n    let match = -1;\n    this.state.ingredients.forEach(ingredient => {\n      if (ingredient.name === ingredientName) {\n        console.log(\"ITS A MATCH\", ingredient);\n        return (match = ingredient);\n      }\n    });\n    console.log(match);\n    return match;\n  };\n\n  addCardHandler = ingredient => {\n    //This handler either receives an ingredient object from SuggestionItem or user inputted text from AutocompleteInput. We have to validate the user inputted text so we check if it has an id property, if not then we call validateIngredient to see if the ingredient exists in our JSON.\n    console.log(\"Called addCardHandler\", ingredient);\n    // console.log(this.state.text);\n    const newIngredient = [...this.state.selectedIngredients];\n\n    //User Input via add button, not selected from Suggestion\n    if (ingredient.id === undefined) {\n      const validated = this.validateIngredient(ingredient);\n      if (validated === -1) {\n        alert(\n          \"Ingredient Not Found:\\nThats a unique ingredient you got there\\n Please check that spelling was correct.\"\n        );\n      } else {\n        newIngredient.push(validated);\n      }\n      //Ingredient was selected from Suggestion\n    } else {\n      newIngredient.push(ingredient);\n    }\n\n    this.setState({ selectedIngredients: newIngredient });\n  };\n\n  deleteCardHandler = index => {\n    console.log(`deleteCardHandler called on index ${index}`);\n    const ingredients = [...this.state.selectedIngredients];\n    // console.log(`ingredients presplice is ${ingredients}`);\n    ingredients.splice(index, 1);\n    console.log(`ingredients postsplice is ${ingredients}`);\n    this.setState({\n      selectedIngredients: ingredients\n    });\n  };\n\n  changeHandler = event => {\n    console.log(event.target.value);\n    this.setState({ text: event.target.value.toLowerCase() });\n  };\n\n  submitHandlerHelper = e => {\n    //if I want to refactor without an anon function, to potentially make the code look cleaner I can comment this function out and replace the onclick submitHandlerHelper with  onClick={() => this.props.submitHandler(this.state.selectedIngredients)\n    e.preventDefault();\n    console.log(this.state.selectedIngredients);\n    //clears text state to remove suggestions\n    this.setState({ text: \"\" });\n    this.props.submitHandler(this.state.selectedIngredients);\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.selectedIngredients.map((ingredient, index) => {\n          return (\n            <Card\n              deleteCardHandler={() => this.deleteCardHandler(index)}\n              name={ingredient.name}\n              key={index}\n            />\n          );\n        })}\n        <AutocompleteInput\n          text={this.state.text}\n          addCardHandler={this.addCardHandler}\n          changeHandler={this.changeHandler}\n        />\n        <button onClick={this.submitHandlerHelper}>Submit</button>\n        <p>{this.state.text}</p>\n        <SuggestionItem\n          text={this.state.text}\n          ingredients={this.state.ingredients}\n          addCardHandler={this.addCardHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AutocompleteContainer;\n","import React from \"react\";\n\nconst Card = props => {\n  const cardStyle = {\n    display: \"inline-block\",\n    margin: \"5px\",\n    padding: \"0px 5px\",\n    border: \"2px solid black\"\n  };\n  console.log(\"hiiiiiiiii\");\n  console.log(props.recipes);\n\n  return (\n    <div>\n      {props.viewMyRecipes === false ? (\n        <div style={cardStyle} key={props.index}>\n          <h2>{props.recipe.title}</h2>\n          <img src={props.recipe.image} alt=\"Recipe Picture\" />\n          <p>\n            Ingredients Used <span>{props.recipe.usedIngredientCount}</span>\n          </p>\n          <ul>\n            {props.recipe.usedIngredients.map((ingredient, index) => {\n              return <li key={index}>{ingredient.name}</li>;\n            })}\n          </ul>\n          <p>\n            Ingredients to Buy <span>{props.recipe.missedIngredientCount}</span>\n          </p>\n          {props.recipe.missedIngredients.map((ingredient, index) => {\n            return <li key={index}>{ingredient.name}</li>;\n          })}\n          <button>Info</button>\n          <button onClick={() => props.saveHandler(props.recipe.id)}>\n            Save\n          </button>\n        </div>\n      ) : (\n        <div style={cardStyle} key={props.index}>\n          <h2>{props.recipe.title}</h2>\n          <img src={props.recipe.image} alt=\"Recipe Picture\" />\n          <p>\n            Ingredients Used <span>{props.recipe.usedIngredientCount}</span>\n          </p>\n          <ul>\n            {props.recipe.ingredients.map((ingredient, index) => {\n              return <li key={index}>{ingredient.name}</li>;\n            })}\n          </ul>\n          <p>\n            Instructions:<br></br>\n            {props.recipe.instructions}\n          </p>\n          <button onClick={() => props.deleteHandler()}>Delete</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst Entry = props => {\n  return (\n    <div>\n      <input\n        onChange={props.emailChangeHandler}\n        type=\"text\"\n        placeholder=\"Email\"\n      />\n      <input\n        onChange={props.passwordChangeHandler}\n        type=\"password\"\n        placeholder=\"Password\"\n      />\n      <button onClick={props.loginHandler}>Log In</button>\n      <button onClick={props.signupHandler}>Sign Up</button>\n    </div>\n  );\n};\nexport default Entry;\n","import React, { Component } from \"react\";\n\nimport Entry from \"./Entry\";\nclass EntryContainer extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    savedRecipes: [],\n    token: \"\"\n  };\n  emailChangeHandler = event => {\n    console.log(event.target.value);\n    this.setState({ email: event.target.value.toLowerCase() });\n  };\n\n  passwordChangeHandler = event => {\n    console.log(event.target.value);\n    this.setState({ password: event.target.value });\n  };\n\n  signupHandler = () => {\n    console.log(\"signupHandler Called\");\n    this.fetchSignup();\n  };\n\n  loginHandler = () => {\n    console.log(\"loginHandler Called\");\n    this.fetchLogin();\n  };\n\n  fetchSignup = () => {\n    fetch(`http://localhost:8081/signup`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: this.state.email,\n        password: this.state.password\n      })\n    })\n      .then(res => {\n        // console.log(res);\n        return res.json();\n      })\n      .then(res => {\n        console.log(res);\n        window.sessionStorage.setItem(\"token\", res.token);\n        this.setState({ token: res.token }, () => {\n          this.props.tokenHandler(this.state.token);\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  //Login: Gets token, gets saved user recipes by token, returns token and saved recipes to App.js\n  fetchLogin = () => {\n    fetch(`http://localhost:8181/login`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: this.state.email,\n        password: this.state.password\n      })\n    })\n      .then(res => {\n        // console.log(res);\n        return res.json();\n      })\n      .then(res => {\n        console.log(res);\n        window.sessionStorage.setItem(\"token\", res.token);\n        this.setState({ token: res.token });\n        return res.token;\n      })\n      .then(token => {\n        if (token !== null) {\n          this.fetchUserRecipes(token);\n        } else {\n          alert(\"User Not Found\");\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  fetchUserRecipes = token => {\n    fetch(`http://localhost:8181/recipes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(res => {\n        // console.log(res);\n        return res.json();\n      })\n      .then(res => {\n        console.log(\"Fetched User Recipes\", res);\n        this.setState({ savedRecipes: res });\n        return res;\n      })\n      .then(callback => {\n        this.props.tokenHandler(this.state.token, this.state.savedRecipes);\n      });\n  };\n  renderIfNoToken() {\n    return (\n      <div>\n        <Entry\n          emailChangeHandler={this.emailChangeHandler}\n          passwordChangeHandler={this.passwordChangeHandler}\n          signupHandler={this.signupHandler}\n          loginHandler={this.loginHandler}\n        />\n      </div>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {!this.state.token ? (\n          this.renderIfNoToken()\n        ) : (\n          <button\n            onClick={() => {\n              this.props.tokenHandler(\"\");\n              this.setState({ token: \"\" });\n            }}>\n            Log Out\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default EntryContainer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport AutocompleteContainer from \"./components/Autocomplete/AutocompleteContainer\";\nimport Card from \"./components/RecipeCards/Card\";\nimport EntryContainer from \"./components/UserEntry/EntryContainer\";\n\nclass App extends Component {\n  state = {\n    activeUser: false,\n    selectedIngredients: [],\n    recipes: [],\n    //consider making saved recipes a n array of objects {name: pie, id: 777}\n    savedRecipes: [],\n    token: \"\",\n    myRecipes: [],\n    viewMyRecipes: false\n  };\n\n  submitHandler = ingredients => {\n    console.log(\"submitHandler Called\", ingredients);\n    this.setState({\n      viewMyRecipes: false,\n      selectedIngredients: ingredients,\n      myRecipes: []\n    });\n  };\n\n  //This function needs to make a call to the database to save the id to the user\n  saveHandler = recipeId => {\n    console.log(\"saveHandler Called\", recipeId);\n    const newRecipe = [...this.state.savedRecipes];\n    newRecipe.push(recipeId);\n    //Change this to get saved recipes from database\n    if (!this.state.savedRecipes.includes(recipeId)) {\n      this.fetchAddRecipe(recipeId);\n      this.setState({ savedRecipes: newRecipe });\n    } else {\n      alert(\"This recipe is already saved\");\n    }\n  };\n\n  deleteHandler = index => {\n    console.log(\"delete handler index\", index);\n    console.log(\"Delete Handler Called\", index);\n    const myNewRecipes = [...this.state.myRecipes];\n    console.log(`ingredients presplice is ${myNewRecipes}`);\n    console.log(myNewRecipes);\n    const id = myNewRecipes[index].id;\n    console.log(\"ID IS\", id);\n    myNewRecipes.splice(index, 1);\n\n    console.log(`ingredients postsplice is ${myNewRecipes}`);\n    this.setState({\n      myRecipes: myNewRecipes\n    });\n    this.fetchDeleteRecipe(id);\n  };\n\n  tokenHandler = (newToken, userRecipes) => {\n    //...new Set removes duplicate values if they exist\n    this.setState({ token: newToken, savedRecipes: [...new Set(userRecipes)] });\n  };\n\n  myRecipeViewHandler = () => {\n    if (!this.state.viewMyRecipes && this.state.token != null) {\n      this.setState({ recipes: [], viewMyRecipes: true });\n      this.fetchUserRecipes();\n      this.state.savedRecipes.forEach(id => {\n        console.log(\"saved recipe id\", id);\n        this.fetchRecipeInformation(id);\n      });\n    }\n  };\n\n  toggleEntryHandler = () => {\n    this.setState({ activeUser: !this.state.activeUser });\n  };\n\n  fetchRecipes = () => {\n    let str = \"\";\n    this.state.selectedIngredients.forEach(element => {\n      str += `,${element.name}`;\n    });\n    str = str.substring(1);\n    console.log(str);\n\n    fetch(\n      `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${str}&number=10&limitLicense=false&ranking=2&ignorePantry=false&apiKey=43d29fdc7015415fa6033d894c28c98c`,\n      {\n        method: \"GET\"\n      }\n    )\n      .then(res => {\n        // console.log(res);\n        return res.json();\n      })\n      .then(res => {\n        return this.setState({ recipes: res });\n      });\n  };\n\n  fetchAddRecipe = recipeId => {\n    const id = recipeId;\n    fetch(`http://localhost:8081/add/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + this.state.token\n      }\n    }) //Force break\n      .then(res => {\n        console.log(res);\n        return res.json();\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  fetchDeleteRecipe = recipeId => {\n    const id = recipeId;\n    fetch(`http://localhost:8081/remove/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + this.state.token\n      }\n    })\n      .then(res => {\n        console.log(res);\n        return res.json();\n      })\n      .then(res => {\n        this.fetchUserRecipes();\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  fetchUserRecipes = () => {\n    fetch(`http://localhost:8081/recipes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + this.state.token\n      }\n    })\n      .then(res => {\n        // console.log(res);\n        return res.json();\n      })\n      .then(res => {\n        console.log(\"Fetched User Recipes\", res);\n        this.setState({ savedRecipes: res });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  fetchRecipeInformation = recipeId => {\n    fetch(\n      `https://api.spoonacular.com/recipes/${recipeId}/information?includeNutrition=false&apiKey=43d29fdc7015415fa6033d894c28c98c`,\n      {\n        method: \"GET\"\n      }\n    )\n      .then(res => {\n        return res.json();\n      })\n      .then(res => {\n        console.log(\"Fetched Recipe Info\", res);\n        this.setState({ temp: res });\n        return this.state.temp;\n      })\n      .then(temp => {\n        const newMyRecipe = [...this.state.myRecipes];\n        let builder = {\n          title: temp.title,\n          id: temp.id,\n          image: temp.image,\n          instructions: temp.instructions,\n          ingredients: temp.extendedIngredients\n        };\n        console.log(\"builder\", builder);\n        newMyRecipe.push(builder);\n        this.setState({ myRecipes: newMyRecipe });\n      });\n  };\n  renderAfterlogin() {\n    return (\n      <div>\n        <h1>Hello, Let's Eat!</h1>\n        {/* ONLY FOR TESTING SHOULD NOT HAVE AN ONCLICK HERE */}\n        <p onClick={this.fetchRecipes}>Select Your Ingredients</p>\n\n        <AutocompleteContainer submitHandler={this.submitHandler} />\n        <button onClick={this.myRecipeViewHandler}>My Recipes</button>\n        {this.state.viewMyRecipes === false\n          ? this.state.recipes.map((recipe, index) => {\n              return (\n                <Card\n                  recipe={recipe}\n                  index={index}\n                  viewMyRecipes={this.state.viewMyRecipes}\n                  saveHandler={this.saveHandler}\n                />\n              );\n            })\n          : this.state.myRecipes.map((recipe, index) => {\n              return (\n                <Card\n                  index={index}\n                  recipe={recipe}\n                  viewMyRecipes={this.state.viewMyRecipes}\n                  deleteHandler={() => this.deleteHandler(index)}\n                />\n              );\n            })}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <EntryContainer\n          toggleEntryHandler={this.toggleEntryHandler}\n          tokenHandler={this.tokenHandler}\n        />\n        {this.state.token ? this.renderAfterlogin() : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}